/*******************************************************************************
 * Copyright 2015 Software Evolution and Architecture Lab, University of Zurich
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package eu.cloudwave.wp5.feedbackhandler.repositories;

import java.util.List;

import org.springframework.data.mongodb.core.aggregation.AggregationResults;

import com.google.common.base.Optional;

import eu.cloudwave.wp5.common.model.MetricType;
import eu.cloudwave.wp5.common.model.Procedure;
import eu.cloudwave.wp5.common.model.ProcedureExecutionMetric;
import eu.cloudwave.wp5.common.model.ProcedureMetric;
import eu.cloudwave.wp5.feedbackhandler.aggregations.AggregatedAverage;
import eu.cloudwave.wp5.feedbackhandler.aggregations.ProcedureMetricAggregation;
import eu.cloudwave.wp5.feedbackhandler.model.db.DbApplication;

/**
 * This class extends the default spring repository with custom methods. It has to be named according to the naming
 * convention (see http://www.javabeat.net/spring-data-custom-repository/).
 */
public interface MetricRepositoryCustom {

  /**
   * Fetches all {@link ProcedureExecutionMetric} that match are assigned to the given {@link Procedure}.
   * 
   * @param application
   *          the application the metrics belong to
   * @param procedure
   *          the {@link Procedure}
   * @return the {@link List} of {@link ProcedureExecutionMetric} that match are assigned to the given {@link Procedure}
   */
  public List<? extends ProcedureExecutionMetric> find(final DbApplication application, Procedure procedure);

  /**
   * Fetches all {@link ProcedureExecutionMetric}'s that match the given attributes from the database.
   * 
   * @param application
   *          the application the metrics belong to
   * @param className
   *          the name of the class of the procedure
   * @param procedureName
   *          the name of the procedure
   * @param arguments
   *          the arguments of the procedure (qualified class names)
   * @return the {@link List} of {@link ProcedureMetric}'s that match the given attributes
   */
  public List<? extends ProcedureExecutionMetric> find(DbApplication application, String className, String procedureName, String[] arguments);

  /**
   * Aggregates all procedure metrics of the given {@link MetricType} that belong to the given application and computes
   * the average value. If for example the given type is 'EXECUTION_TIME' the average execution time for all procedures
   * is calculated.
   * 
   * The MongoDB query that is executed ion the background (i.e. that is generated by the Spring Data MongoDB
   * aggregation framework) is:
   * 
   * <pre>
   * db.metrics.aggregate([
   *     { $match : { "application.$id" : ObjectId("<application-id>"), type : "<METRIC_TYPE>" } },
   *     { $group : { _id : { procedure : "$procedure"}, averageValue: { $avg: "$value" } } },
   *     { $sort  : { "averageValue" : -1 } }
   * ]);
   * </pre>
   * 
   * @param application
   *          the application
   * @param type
   *          the type of metrics to be calculated
   * @return the result of the aggregation
   */
  public AggregationResults<ProcedureMetricAggregation> aggregateProcedureMetrics(DbApplication application, final MetricType type);

  /**
   * Aggregates the execution times of the procedure with the given properties.
   * 
   * The appropriate query is:
   * 
   * <pre>
   * db.metrics.aggregate([
   *     { $match : { 
   *         "application.$id" : ObjectId("<application-id>"),
   *         "type": "EXECUTION_TIME", 
   *         "procedure.className" : "eu.cloudwave.samples.aopsample.Main",
   *         "procedure.name" : "executeFirst",
   *         "procedure.arguments" : "java.util.List",
   *     } },
   *     { $group : { _id : { additionalQualifier : "$additionalQualifier"}, averageValue: { $avg: "$value" } } }
   * ]);
   * </pre>
   * 
   * @param application
   *          the application
   * @param className
   *          the name of the class of the procedure
   * @param name
   *          the name of the procedure
   * @param arguments
   *          the arguments of the procedure (qualified class names)
   * @return the aggregated execution time or {@link Optional#absent()} if no appropriate data could be found in the
   *         database
   */
  public Optional<Double> aggregateExecutionTime(DbApplication application, final String className, final String name, final String[] arguments);
  
  /**
   * Aggregates the collection sizes of the procedure with the given properties.
   * 
   * The appropriate query is:
   * 
   * <pre>
   * db.metrics.aggregate([
   *     { $match : { 
   *         "application.$id" : ObjectId("<application-id>"),
   *         "type": "COLLECTION_SIZE", 
   *         "procedure.className" : "<className>",
   *         "procedure.name" : "<name>",
   *         "procedure.arguments" : "<arguments>",
   *     } },
   *     { $group : { _id : { additionalQualifier : "$additionalQualifier"}, averageValue: { $avg: "$value" } } }
   * ]);
   * </pre>
   * 
   * @param application
   *          the application
   * @param className
   *          the name of the class of the procedure
   * @param name
   *          the name of the procedure
   * @param arguments
   *          the arguments of the procedure (qualified class names)
   * @return the aggregated collection size
   */
  public AggregationResults<AggregatedAverage> aggregateCollectionSizes(DbApplication application, final String className, final String name, final String[] arguments);

}
